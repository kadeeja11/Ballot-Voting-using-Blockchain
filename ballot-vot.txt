ballot-vot.sol file in remix.ethereum.org

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.14;

contract Ballot {

    struct Voter {
        uint vote;
        bool voted;
        uint weight;
    }

    struct Candidate {
    bytes32 name;
    uint voteCount;
    }

    Candidate[] public candidates;

    mapping(address => Voter) public voters;

    address public chairperson;

    constructor(bytes32[] memory candidateNames) {

        chairperson = msg.sender; //msg.sender is a global variable that states the person who is currently connecting to the contract

        voters[chairperson].weight = 1;
        

        for(uint i=0; i<candidateNames.length; i++) {
            candidates.push(Candidate({
                name: candidateNames[i],
                voteCount: 0
            }));
        }
    }

    //function to authenticate the votes
    function giveRightToVote(address voter) public {
        require(msg.sender == chairperson,'Only chairperson can give access to vote');
        require(!voters[voter].voted, 'voter has already voted');
        require(voters[voter].weight == 0);

        voters[voter].weight = 1;
    }

    //function to vote
    function voting(uint candidate) public{
        Voter storage sender = voters[msg.sender];
        require(sender.weight != 0, 'Has no right to vote');
        require(!sender.voted, 'Has already voted');
        sender.voted = true;
        sender.vote = candidate;

        candidates[candidate].voteCount += sender.weight;

    }

    //function to show result

    //function to show the winning candidate by integer
    function winningCandidate() public view returns (uint winningCandidate_){
        uint winningVoteCount = 0;
        for(uint i=0; i<candidates.length; i++){
            if(candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;
                winningCandidate_ = i;
            }
        }
    }

    //function to show the winning candidate by name
    function winningName() public view returns (bytes32 winningName_){
        winningName_ = candidates[winningCandidate()].name;
    }
}

